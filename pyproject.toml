[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cpc-snn-gw"
version = "1.0.0"
description = "Neuromorphic Gravitational Wave Detection using CPC+SNN"
readme = "README.md"
requires-python = ">=3.10"
license = {text = "MIT"}
authors = [
    {name = "LIGO CPC-SNN Team"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Physics",
]
dependencies = [
    "jax[cpu]>=0.4.20",
    "flax>=0.8.0",
    "optax>=0.1.7",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
    "matplotlib>=3.6.0",
    "seaborn>=0.12.0",
    "pandas>=1.5.0",
    "scikit-learn>=1.2.0",
    "tqdm>=4.64.0",
    "rich>=13.0.0",
    "wandb>=0.15.0",
    "tensorboard>=2.12.0",
    "pyyaml>=6.0",
    "dataclasses-json>=0.5.0",
    "psutil>=5.9.0",
    "h5py>=3.8.0",
]

[project.optional-dependencies]
gpu = [
    "jax[cuda12_pip]>=0.4.20",
]
dev = [
    "pytest>=7.2.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.1.0",
    "ruff>=0.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.5.0",
    "pre-commit>=3.0.0",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=1.0.0",
]
all = [
    "cpc-snn-gw[gpu,dev,docs]",
]

[project.urls]
Homepage = "https://github.com/ligo-cpc-snn/cpc-snn-gw"
Documentation = "https://cpc-snn-gw.readthedocs.io"
Repository = "https://github.com/ligo-cpc-snn/cpc-snn-gw"
Issues = "https://github.com/ligo-cpc-snn/cpc-snn-gw/issues"

[project.scripts]
cpc-snn-train = "training.cli:main"

# ===== RUFF CONFIGURATION =====
[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings  
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "SIM", # flake8-simplify
    "PL",  # Pylint
    "BLE", # flake8-blind-except
    "RET", # flake8-return
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "RUF", # Ruff-specific rules
]
ignore = [
    "E501",    # line too long, handled by black
    "B008",    # do not perform function calls in argument defaults
    "B905",    # strict zip (Python 3.10+)
    "C901",    # too complex
    "PLR0913", # too many arguments
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "RET504",  # unnecessary variable assignment before return
    "SIM108",  # use ternary operator instead of if-else
    "ARG002",  # unused method argument
    "ERA001",  # commented out code
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    "ARG001",  # unused function argument
    "ARG002",  # unused method argument
    "PLR2004", # magic value used in comparison
    "S101",    # use of assert
    "SLF001",  # private member accessed
]
"scripts/**/*.py" = [
    "PLR2004", # magic value used in comparison
    "T201",    # print found
]
"examples/**/*.py" = [
    "PLR2004", # magic value used in comparison  
    "T201",    # print found
    "INP001",  # implicit namespace package
]

[tool.ruff.isort]
known-first-party = ["data", "models", "training", "utils"]
known-third-party = ["jax", "flax", "optax", "numpy", "scipy", "matplotlib", "sklearn", "wandb"]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
split-on-trailing-comma = true
force-single-line = false
lines-between-types = 1

[tool.ruff.mccabe]
max-complexity = 15

[tool.ruff.pycodestyle]
max-doc-length = 100
ignore-overlong-task-comments = true

# ===== BLACK CONFIGURATION =====
[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # Directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | outputs
  | checkpoints
  | logs
)/
'''

# ===== ISORT CONFIGURATION =====
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["data", "models", "training", "utils"]
known_third_party = ["jax", "flax", "optax", "numpy", "scipy", "matplotlib", "sklearn", "wandb", "rich", "tqdm"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]

# ===== MYPY CONFIGURATION =====
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
ignore_missing_imports = true
strict_optional = true

[[tool.mypy.overrides]]
module = [
    "jax.*",
    "flax.*", 
    "optax.*",
    "wandb.*",
    "tensorboard.*",
    "sklearn.*",
    "scipy.*",
    "matplotlib.*",
    "seaborn.*",
    "h5py.*",
    "tqdm.*",
    "rich.*",
]
ignore_missing_imports = true

# ===== PYTEST CONFIGURATION =====
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=data",
    "--cov=models", 
    "--cov=training",
    "--cov=utils",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore::UserWarning:jax.*",
    "ignore::FutureWarning:jax.*",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
    "model: marks tests for model components",
    "training: marks tests for training components", 
    "data: marks tests for data components",
    "utils: marks tests for utility components",
]

# ===== COVERAGE CONFIGURATION =====
[tool.coverage.run]
source = ["data", "models", "training", "utils"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/site-packages/*",
    "outputs/*",
    "checkpoints/*",
    "logs/*",
    "scripts/*",
    "examples/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
precision = 2
show_missing = true

[tool.coverage.html]
directory = "htmlcov"

# ===== SETUPTOOLS CONFIGURATION =====
[tool.setuptools]
packages = ["data", "models", "training", "utils"]
include-package-data = true

[tool.setuptools.package-dir]
"" = "."

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt", "*.md"]